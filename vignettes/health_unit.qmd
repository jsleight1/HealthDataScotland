---
title: "Introduction to health units"
vignette: >
  %\VignetteIndexEntry{health_unit}
  %\VignetteEngine{quarto::html}
  %\VignetteEncoding{UTF-8}
knitr:
  opts_chunk:
    collapse: true
    comment: '#>'
---

```{r}
#| label: setup
library(HealthDataScotland)
```

# Introduction

HealthDataScotland uses a series of R6 objects to store and present statistics
associated with GP practices and hospitals across Scotland. This vignette will
outline the functionality of these objects and the motivation behind their
design.

# Health units

The object that acts as the lowest common denominator in HealthDataScotland is a
`health_unit`. These objects store relevant statistics associated with a single
health centre (GP or hospital). Currently HealthDataScotland has two class of
`health_unit()` implemented; `gp()` and `hospital()` storing data associated
with a single GP practice or hospital respectively.

## GP

Data associated with a single GP practice is stored in a `gp()` health unit
object. `example_gp_unit()` can be used to render an example object.

```{r}
gp_unit <- example_gp_unit()
gp_unit
```

### Data

GP health unit objects house a data.frame storing demography statistics and a
data.frame storing metadata associated with the GP practice. These can be
obtained using the public functions `$data` and `$metadata`.

```{r}
gp_unit$data()
gp_unit$metadata()
```

In addition, to the `$metadata` function returing a data.frame there are also
relevant helper functions to pull out particular metadata associated with a GP
practice.

```{r}
gp_unit$ID()
gp_unit$title()
gp_unit$health_board()
gp_unit$address()
```

### Plotting

Visualising data associated with a single GP practice can be achieved using the
`$plot` function with an appropriate `type` argument. To see which plot types
are available to use, the `$plot_types` function can be used.

```{r}
gp_unit$plot_types()
```

```{r}
#| label: fig-gp_population_pyramid
#| fig-cap: !expr gp_unit$plot_info(type = "population_pyramid")
gp_unit$plot(type = "population_pyramid")
```

Helper functions `$plot_data` and `$plot_info` can be used to create the data
associated with each plot and character text describing each plot (alongside
functionality related to the shiny application) respectively.

```{r}
gp_unit$plot_data(type = "population_pyramid")
gp_unit$plot_info(type = "population_pyramid")
```

### Summarising

Summarising data associated with a single GP practice can be achieved using the
`$summary` function with an appropriate `type` argument. To see which summary types
are available to use, the `$summary_types` function can be used.

```{r}
gp_unit$summary_types()
```

```{r}
gp_unit$summary(type = "population_summary")
```

This summary can also be coerced into a datatable using the `$datatable`
function.

```{r, echo = FALSE}
gp_unit$datatable(type = "population_summary")
```

The helper function `$plot_info` can be used to create the character text
describing each summary table (alongside functionality related to the shiny application)
respectively.

```{r}
gp_unit$summary_info(type = "population_summary")
```

## Hospital

Data associated with a single hospital is stored in a `hospital()` health unit
object. `example_hospital_unit()` can be used to render an example object.

```{r}
hospital_unit <- example_hospital_unit()
```

### Data

Hospital health unit objects house a data.frame storing bed capacity data and a
data.frame storing metadata associated with the hospital. These can be obtained
using the public functions `$data` and `$metadata`.

```{r}
hospital_unit$data()
hospital_unit$metadata()
```

In addition, to the `$metadata` function returing a data.frame there are also
relevant helper functions to pull out particular metadata associated with a
hospital.

```{r}
hospital_unit$ID()
hospital_unit$title()
hospital_unit$health_board()
hospital_unit$address()
```

### Plotting

Visualising data associated with a single hospital can be achieved using the
`$plot` function with an appropriate `type` argument. To see which plot types
are available to use, the `$plot_types` function can be used.

```{r}
hospital_unit$plot_types()
```

```{r}
#| label: fig-hosp_specialty_line_annual
#| fig-cap: !expr hospital_unit$plot_info(type = "specialty_line")
hospital_unit$plot(type = "specialty_line")
```

Helper functions `$plot_data` and `$plot_info` can be used to create the data
associated with each plot and character text describing each plot (alongside
functionality related to the shiny application) respectively.

```{r}
hospital_unit$plot_data(type = "specialty_line")
hospital_unit$plot_info(type = "specialty_line")
```

### Summarising

Summarising data associated with a single hospital can be achieved using the
`$summary` function with an appropriate `type` argument. To see which summary types
are available to use, the `$summary_types` function can be used.

```{r}
hospital_unit$summary_types()
```

```{r}
hospital_unit$summary(type = "specialty_summary")
```

This summary can also be coerced into a datatable using the `$datatable`
function.

```{r, echo = FALSE}
hospital_unit$datatable(type = "specialty_summary")
```

The helper function `$plot_info` can be used to create the character text
describing each summary table (alongside functionality related to the shiny application)
respectively.

```{r}
hospital_unit$summary_info(type = "specialty_summary")
```

# Health unit grps

HealthDataScotland contains functionality that combines several GP practices or
hospitals to create summary visualisations. This is achieved by using
`health_unitgrp()` objects, which house multiple health units. Currently
HealthDataScotland has two class of `health_unitgrp()` implemented; `gp_grp()`
and `hospital_grp()`, which store data associated with a multiple GP practices
or hospitals respectively.

## GP

Data associated with multiple GP practices is stored in `gp_grp()` objects.
`example_gp_grp_unit()` can be used to render an example object.

```{r}
gp_grp_unit <- example_gp_grp_unit()
gp_grp_unit
```

### Data

`gp_grp()` objects contain a list of `gp()` health units. These can be accessed
using the `$data` function.

```{r}
gp_grp_unit$data()
```

Metadata for all `gp()` health units within the gp_grp object can be summarised
using the `$metadata` function.

```{r}
gp_grp_unit$metadata()
```

Additionally, selected metadata from the `gp()` health units can also be
obtained using relevant getter functions.

```{r}
gp_grp_unit$IDs()
gp_grp_unit$titles()
```

`gp_grp()` objects can also be subset to the selected GP practices using
`$subset` with a set of character IDs.

```{r}
gp_grp_unit$subset(id = "10017")
```

This will return a `gp_grp()` object. However, a single gp object can be pulled
out using `$health_unit`.

```{r}
gp_grp_unit$health_unit(id = "10017")
```

### Plotting

Visualising data assciated with multiple GP practices can be achieved using the
`$plot` function with an appropriate `type` argument. To see which plot types
are available to use, the `$plot_types` function can be used.

```{r}
gp_grp_unit$plot_types()
```

```{r}
#| label: fig-gp_grp_bar
#| fig-cap: !expr gp_grp_unit$plot_info(type = "gp_bar")
gp_grp_unit$plot(type = "gp_bar")
```

Helper functions `$plot_data` and `$plot_info` can be used to create the data
associated with each plot and character text describing each plot (alongside
functionality related to the shiny application) respectively.

```{r}
gp_grp_unit$plot_data(type = "gp_bar")
gp_grp_unit$plot_info(type = "gp_bar")
```

### Summarising

Summarising data associated with multiple GP practices can be achieved using the
`$summary` function with an appropriate `type` argument. To see which summary
types are available to use, the `$summary_types` function can be used.

```{r}
gp_grp_unit$summary_types()
```

```{r}
gp_grp_unit$summary(type = "lookup")
```

This summary can also be coerced into a datatable using the `$datatable`
function.

```{r, echo = FALSE}
gp_grp_unit$datatable(type = "lookup")
```

The helper function `$summary_info` can be used to create the character text
describing each summary table (alongside functionality related to the shiny application)
respectively.

```{r}
gp_grp_unit$summary_info(type = "lookup")
```

## Hospital

Data associated with multiple hospitals is stored in `hospital_grp()` objects.
`example_hospital_grp_unit()` can be used to render an example object.

```{r}
hospital_grp_unit <- example_hospital_grp_unit()
hospital_grp_unit
```

### Data

`hospital_grp()` objects contain a list of `hospital()` health units. These can
be accessed using the `$data` function.

```{r}
hospital_grp_unit$data()
```

Metadata for all `hospital()` health units within the hospital_grp object can be
summarised using the `$metadata` function.

```{r}
hospital_grp_unit$metadata()
```

Additionally, selected metadata from the `hospital()` health units can also be
obtained using relevant getter functions.

```{r}
hospital_grp_unit$IDs()
hospital_grp_unit$titles()
```

`hospital_grp()` objects can also be subset to the selected hospitals using
`$subset` with a set of character IDs.

```{r}
hospital_grp_unit$subset(id = "A201H")
```

This will return a `hospital_grp()` object. However, a single hospital object
can be pulled out using `$health_unit`.

```{r}
hospital_grp_unit$health_unit(id = "A201H")
```

### Plotting

Visualising data assciated with multiple hospitals can be achieved using the
`$plot` function with an appropriate `type` argument. To see which plot types
are available to use, the `$plot_types` function can be used.

```{r}
hospital_grp_unit$plot_types()
```

```{r}
#| label: fig-hospital_grp_bar
#| fig-cap: !expr hospital_grp_unit$plot_info(type = "hospital_bar")
hospital_grp_unit$plot(type = "hospital_bar")
```

Helper functions `$plot_data` and `$plot_info` can be used to create the data
associated with each plot and character text describing each plot (alongside
functionality related to the shiny application) respectively.

```{r}
hospital_grp_unit$plot_data(type = "hospital_bar")
hospital_grp_unit$plot_info(type = "hospital_bar")
```

### Summarising

Summarising data associated with multiple hospitals can be achieved using the
`$summary` function with an appropriate `type` argument. To see which summary
types are available to use, the `$summary_types` function can be used.

```{r}
hospital_grp_unit$summary_types()
```

```{r}
hospital_grp_unit$summary(type = "lookup")
```

This summary can also be coerced into a datatable using the `$datatable`
function.

```{r, echo = FALSE}
hospital_grp_unit$datatable(type = "lookup")
```

The helper function `$summary_info` can be used to create the character text
describing each summary table (alongside functionality related to the shiny application)
respectively.

```{r}
hospital_grp_unit$summary_info(type = "lookup")
```
